openapi: 3.0.3
info:
  title: ChaseWhiteRabbit API
  description: |
    Enterprise-grade API for digital transformation platform supporting legacy system modernization.
    
    ## Key Features
    - RESTful architecture with JSON payloads
    - Comprehensive error handling and validation
    - Rate limiting and authentication
    - Monitoring and observability integration
    - Multi-environment support
    
  version: 1.0.0
  contact:
    name: Tiation Enterprise Support
    email: tiatheone@protonmail.com
    url: https://github.com/tiation/ChaseWhiteRabbit-Business-Overview
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.sxc.codes/v1
    description: Production server
  - url: https://api-staging.sxc.codes/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Local development server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  /health:
    get:
      tags: [Health]
      summary: Health check endpoint
      description: Returns the current health status of the API
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: API is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /metrics:
    get:
      tags: [Monitoring]
      summary: Prometheus metrics
      description: Returns metrics in Prometheus format for monitoring
      security: []
      responses:
        '200':
          description: Metrics data
          content:
            text/plain:
              schema:
                type: string

  /projects:
    get:
      tags: [Projects]
      summary: List all projects
      description: Retrieve a paginated list of transformation projects
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [planning, active, completed, archived]
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Projects]
      summary: Create new project
      description: Initialize a new digital transformation project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{projectId}:
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      tags: [Projects]
      summary: Get project details
      description: Retrieve detailed information about a specific project
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [Projects]
      summary: Update project
      description: Update project configuration and status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{projectId}/deployments:
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      tags: [Deployments]
      summary: List project deployments
      description: Get deployment history for a project
      responses:
        '200':
          description: List of deployments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentListResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags: [Deployments]
      summary: Create deployment
      description: Trigger a new deployment for the project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeploymentRequest'
      responses:
        '201':
          description: Deployment initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "healthy"
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: "1.0.0"
        uptime:
          type: number
          description: Uptime in seconds
        environment:
          type: string
          enum: [development, staging, production]

    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        status:
          type: string
          enum: [planning, active, completed, archived]
        type:
          type: string
          enum: [modernization, greenfield, migration]
        technology_stack:
          type: array
          items:
            type: string
        environment_urls:
          type: object
          properties:
            development:
              type: string
              format: uri
            staging:
              type: string
              format: uri
            production:
              type: string
              format: uri
        metrics:
          $ref: '#/components/schemas/ProjectMetrics'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - status
        - type

    ProjectMetrics:
      type: object
      properties:
        uptime_percentage:
          type: number
          minimum: 0
          maximum: 100
        average_response_time_ms:
          type: number
          minimum: 0
        deployment_frequency:
          type: string
          enum: [daily, weekly, monthly]
        lead_time_hours:
          type: number
          minimum: 0
        mttr_minutes:
          type: number
          minimum: 0

    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        type:
          type: string
          enum: [modernization, greenfield, migration]
        technology_stack:
          type: array
          items:
            type: string
      required:
        - name
        - type

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        status:
          type: string
          enum: [planning, active, completed, archived]
        technology_stack:
          type: array
          items:
            type: string
        environment_urls:
          type: object
          properties:
            development:
              type: string
              format: uri
            staging:
              type: string
              format: uri
            production:
              type: string
              format: uri

    ProjectListResponse:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    Deployment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        environment:
          type: string
          enum: [development, staging, production]
        version:
          type: string
        status:
          type: string
          enum: [pending, running, success, failed, cancelled]
        commit_hash:
          type: string
        deployed_by:
          type: string
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        logs_url:
          type: string
          format: uri

    DeploymentListResponse:
      type: object
      properties:
        deployments:
          type: array
          items:
            $ref: '#/components/schemas/Deployment'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    CreateDeploymentRequest:
      type: object
      properties:
        environment:
          type: string
          enum: [development, staging, production]
        version:
          type: string
        commit_hash:
          type: string
      required:
        - environment

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
        total_pages:
          type: integer
          minimum: 0
        total_items:
          type: integer
          minimum: 0

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
            timestamp:
              type: string
              format: date-time
            request_id:
              type: string
      required:
        - error

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "VALIDATION_ERROR"
              message: "Request validation failed"
              timestamp: "2024-01-01T12:00:00Z"
              request_id: "req_123456"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "UNAUTHORIZED"
              message: "Authentication required"
              timestamp: "2024-01-01T12:00:00Z"
              request_id: "req_123456"

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "NOT_FOUND"
              message: "Resource not found"
              timestamp: "2024-01-01T12:00:00Z"
              request_id: "req_123456"

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "INTERNAL_ERROR"
              message: "An unexpected error occurred"
              timestamp: "2024-01-01T12:00:00Z"
              request_id: "req_123456"

tags:
  - name: Health
    description: Health check and monitoring endpoints
  - name: Projects
    description: Project management operations
  - name: Deployments
    description: Deployment management operations
  - name: Monitoring
    description: Monitoring and observability endpoints
